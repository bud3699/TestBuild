name: Virtual Display Driver Building

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Check Chocolatey installation
        run: choco --version

      - name: Install Visual Studio 2022 dependencies
        run: |
          choco install visualstudio2022-workload-manageddesktop -y || exit 1
          choco install visualstudio2022-workload-nativedesktop -y || exit 1
          choco install visualstudio2022-workload-vctools -y || exit 1
          choco install windowsdriverkit11 -y || exit 1

      - name: Build all configurations and platforms
        run: |
          $configs = @('Debug', 'Release')
          $platforms = @('x64', 'ARM64')
          foreach ($config in $configs) {
            foreach ($platform in $platforms) {
              Write-Host "Building for Configuration: $config, Platform: $platform"
              msbuild "Virtual Display Driver (HDR)/MTTVDD.sln" /p:Configuration=$config /p:Platform=$platform
              
              # Verify build artifacts
              dir "Virtual Display Driver (HDR)\$platform\$config\MttVDD"
              
              # Upload artifacts
              echo "::group::Uploading Built Artifacts for $config-$platform"
              gh actions upload-artifact --name Built-Driver-$config-$platform --path "Virtual Display Driver (HDR)\$platform\$config\MttVDD\MttVDD.dll"
              gh actions upload-artifact --name Built-Driver-$config-$platform --path "Virtual Display Driver (HDR)\$platform\$config\MttVDD\MttVDD.inf"
              gh actions upload-artifact --name Built-Driver-$config-$platform --path "Virtual Display Driver (HDR)\$platform\$config\MttVDD\mttvdd.cat"
              gh actions upload-artifact --name Built-Driver-$config-$platform --path "Virtual Display Driver (HDR)\$platform\$config\MttVDD\vdd_settings.xml"
              echo "::endgroup::"
            }
          }

      - name: Generate release tag
        id: generate_tag
        run: |
          $releaseTag = (Get-Date).ToString('yy.MM.dd')
          echo "RELEASE_TAG=$releaseTag" >> $env:GITHUB_ENV

      - name: Show generated release tag
        run: |
          echo "Generated Release Tag: ${{ env.RELEASE_TAG }}"
