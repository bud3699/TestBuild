name: Virtual Display Driver Building

on:
  workflow_dispatch:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, ARM64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Check Chocolatey installation
        run: choco --version

      - name: Install Visual Studio 2022 dependencies
        run: |
          choco install visualstudio2022-workload-manageddesktop -y
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          choco install visualstudio2022-workload-nativedesktop -y
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          choco install visualstudio2022-workload-vctools -y
          if ($LASTEXITCODE -ne 0) { exit 1 }
          
          choco install windowsdriverkit11 -y
          if ($LASTEXITCODE -ne 0) { exit 1 }

      - name: Build the driver
        run: |
          msbuild "Virtual Display Driver (HDR)/MTTVDD.sln" /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}

      - name: List build directory
        run: dir "Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD"

      - name: Upload built driver
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: Built-Driver-${{ matrix.configuration }}-${{ matrix.platform }}
          path: |
            Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD\MttVDD.dll
            Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD\MttVDD.inf
            Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD\mttvdd.cat
            Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD\vdd_settings.xml

      - name: Generate release tag
        id: generate_tag
        run: |
          $releaseTag = (Get-Date).ToString('yy.MM.dd')
          echo "RELEASE_TAG=$releaseTag" >> $env:GITHUB_ENV

      - name: Show generated release tag
        run: |
          echo "Generated Release Tag: ${{ env.RELEASE_TAG }}"

      - name: Verify Built Artifacts
        run: dir 'Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD'

      - name: Clone Inno Setup Script Repository
        run: |
          git clone https://github.com/bud3699/Innno-Compile-Test.git inno-setup

      - name: Prepare Inno Setup Input Folder
        run: |
          copy "Virtual Display Driver (HDR)\${{ matrix.platform }}\${{ matrix.configuration }}\MttVDD\*" inno-setup\input\
          $platform = "${{ matrix.platform }}"
          if ($platform -eq 'ARM64') {
            (Get-Content "inno-setup\input\Setup.iss") | 
              ForEach-Object { $_ -replace 'x64compatible', 'arm64compatible' } | 
              Set-Content "inno-setup\input\Setup.iss"
                
            (Get-Content "inno-setup\input\Setup.iss") | 
              ForEach-Object { $_ -replace '-x64', '-arm64' } | 
              Set-Content "inno-setup\input\Setup.iss"
              
            (Get-Content "inno-setup\input\Setup.iss") | 
              ForEach-Object { $_ -replace '1.0.0', '${{ env.RELEASE_TAG }}' } | 
              Set-Content "inno-setup\input\Setup.iss"
          }

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: inno-setup\Setup.iss
          options: /O+

      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: Installer-${{ matrix.configuration }}-${{ matrix.platform }}
          path: inno-setup\output\*.exe
